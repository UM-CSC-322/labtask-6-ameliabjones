#include <stdio.h>
#include <stdlib.h>

double* input_matrix(int *rows, int *columns, const char* matrix_name) {
    printf("Enter number of rows for %s: ", matrix_name);
    scanf("%d", rows);
    printf("Enter number of columns for %s: ", matrix_name);
    scanf("%d", columns);

    double *matrix = malloc((*rows) * (*columns) * sizeof(double));
    if (matrix == NULL) {
        printf("Error allocating memory for %s\n", matrix_name);
        return NULL;
    }

    printf("Enter values for %s using row-major order:\n", matrix_name);
    for (int i = 0; i < *rows; ++i) {
        for (int j = 0; j < *columns; ++j) {
            printf("%s[%d][%d]: ", matrix_name, i, j);
            scanf("%lf", &matrix[i * (*columns) + j]);
        }
    }

    return matrix;
}

int matrix_multiply(const double *m1, int m1_rows, int m1_columns, const double *m2, int m2_rows, int m2_columns, double *result) {
    if (m1_columns != m2_rows) {
        return 0; // Invalid dimensions for matrix multiplication
    }

    for (int i = 0; i < m1_rows; ++i) {
        for (int j = 0; j < m2_columns; ++j) {
            result[i * m2_columns + j] = 0;
            for (int k = 0; k < m1_columns; ++k) {
                result[i * m2_columns + j] += m1[i * m1_columns + k] * m2[k * m2_columns + j];
            }
        }
    }

    return 1; // Matrix multiplication successful
}

void output_matrix(const double *matrix, int rows, int columns) {
    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < columns; ++j) {
            printf("%.2f\t", matrix[i * columns + j]);
        }
        printf("\n");
    }
}
